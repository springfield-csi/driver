
# Overview

** Minimail testing completed.  NOT ready for use with real data.

Prototype CSI driver backed by Blivet.

The project is a proof of concept to build a CSI driver that uses
a mapped dbus domain socket to create storage on the host and provide
the storage for use to containers on demand.

Currently we are looking for interest in the project to justify
investing more time.

Blivet has a prototype dbus API that provides high level APIs to Linux
storage technologies.  LVM, BTRFS, MD, and Stratis are included in this
prototype only CSI driver code.

Note: There are known issues using BTRFS.  See:
https://github.com/springfield-csi/driver/issues/3

# How to install

## Setup Kind Cluster
./build_cluster.sh

## Edit each of the storage class files

The following files each have a field:

    disks: /dev/XXXX,/dev/XXXX

Updated each class to have valid block devices.  The any content of a
block device with be lost.  Please use caution!  The CSI driver will
wipe /dev/XXX clean to prepate it for new use as a resource for the
PVs allocated by the CSI driver.


    deploy/helm/springfield-csi/templates/storage-class-lvm.yaml
    deploy/helm/springfield-csi/templates/storage-class-md.yaml
    deploy/helm/springfield-csi/templates/storage-class-stratis.yaml
    deploy/helm/springfield-csi/templates/storage-class-btrfs.yaml

Note: Every class must contain valid block devices.  When the driver
starts, it wipes clean any block devices used by the classes.  If
any fail to initialize the driver will exit.

## Start Blivet dbus server

Clone the 3.8-devel branch from https://github.com/storaged-project/blivet.git to
a local directory.  Note: the 3.8-devel branch has fixes necessary for the
blivet dbus server to work properly.  From the top level directory run:

export PYTHONPATH=${workspaceFolder}${pathSeparator} dbus/blivetd

Note: There are some known problems with the blivetd.  If the CSI driver is
restarted.  The blivetd process must be restarted too.

## Deploy the driver from ghcr.io/trgill/springfield-csi-driver:devel
./deploy.sh

cd tests
## Run a test to create a PVC and attach to a test container.

./lvm_test.sh

## Open a shell in the test pod to look at the storage

kubectl exec --stdin --namespace default springfield-pvc-lvm-test --  /bin/bash

