
# Overview

This is a prototype of a CSI driver over Stratis 

Please use with caution - only minimal testing has been completed.

Not ready for production use.

# Setup

Currently tested on Fedora release 37 VM with empty block devices
for the Stratis pool.

From the top level directory:

1. Run the setup.sh script.  The script will copy kind, kubect and helm
   to the bin directory.  It will also install kubernetes-client, stratisd,
   stratis-cli and podman.

2. Run the build_cluster.sh script to setup kind running a kubernetes
   cluster.

   2a. run the gp (see aliases below) alias to see the currently running pods

3. Update the deploy.sh script to replace /dev/XXX with actual block 
   devices that may be used by stratis for a pool.  Be careful maintain
   the format of the list.  Adding spaces between the devices will cause
   problems with how helm passes the parameter to the container startup.

   If the block device was previously used, it may be prepared for use
   with Stratis via "wipefs -a /dev/XXX".  Note: this will destroy all
   data on the block device.

   If any of the pods are in a CrashLoopBackOff state, there was a problem
   with startup.  Use the "vl <podname>" command to view the logs.

4. Invoke the deploy.sh script to start the CSI driver in the kind cluster.
   The script will wait until the node and controller pods are in a ready
   state.  
   
   If a PVC allocation request is issued when the CSI driver is
   partially deployed, the cluster and PVC may be left in a bad state.

   4a. Run the gp alias.  The node and controller pods for the CSI driver
       will be running.  Note that the CSI driver pods run in the 
       springfield-system namespace.

5. cd tests
   run the test.sh script - this will invoke the CSI driver to create a 
   stratis pool named springfield-csi-pool.

6. To cleanup:
   from the tests directory

   cleanup_tests.sh

   from the top level directory

   cleanup.sh

# Useful commands to check state:

alias gp='kubectl get pods --all-namespaces'
alias dp='kubectl describe pods --namespace springfield-system'
alias vl='kubectl logs --namespace springfield-system --tail=1000'
alias pvc='kubectl describe pvc'
alias pv='kubectl describe pv'

# To open a bash shell inside the CSI node or controller:

kubectl exec --stdin --namespace springfield-system --tty springfield-XXX -- /bin/bash

# To open a sh shell inside the test pod:
# Note: the base image for the test container doesn't include bash

kubectl exec --stdin --namespace default --tty springfield-pvc-test -- /bin/sh

# Inside the test pod, the PVC will be mounted on /springfield-volume

# df
Filesystem      1K-blocks    Used  Available Use% Mounted on
overlay          30405632 8513628   21432084  29% /
tmpfs               65536       0      65536   0% /dev
/stratis/dm-5  1073217536 7517520 1065700016   1% /springfield-volume
/dev/vda3        30405632 8513628   21432084  29% /etc/hosts
shm                 65536       0      65536   0% /dev/shm
tmpfs             4011800      12    4011788   1% /run/secrets/kubernetes.io/serviceaccount
tmpfs             2005900       0    2005900   0% /proc/acpi
tmpfs             2005900       0    2005900   0% /proc/scsi
tmpfs             2005900       0    2005900   0% /sys/firmware 

# from the host that is running the cluster the stratis fs will look like:

# stratis fs list
Pool                   Filesystem                                 Total / Used / Free             Created             Device                                                                       UUID                                
springfield-csi-pool   pvc-9198726f-3650-4b28-8e55-e4fffce38e23   1 TiB / 546 MiB / 1023.47 GiB   Apr 13 2023 09:11   /dev/stratis/springfield-csi-pool/pvc-9198726f-3650-4b28-8e55-e4fffce38e23   2a190e49-b2b6-47de-bdb3-5386e5ad6971

# The stratis pool may be mounted in the host running the cluster via:
# Note: the name will be different

mount /dev/stratis/springfield-csi-pool/pvc-9198726f-3650-4b28-8e55-e4fffce38e23 /mnt

Files created in the pod will be visible in both the test pod and the host since they
are shared.

# Forward the HTTP port from the pod to the host

kubectl port-forward springfield-pvc-test 80:80

# Open browser on http://localhost:80
